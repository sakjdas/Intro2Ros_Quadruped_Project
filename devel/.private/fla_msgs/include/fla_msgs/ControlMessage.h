// Generated by gencpp from file fla_msgs/ControlMessage.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_CONTROLMESSAGE_H
#define FLA_MSGS_MESSAGE_CONTROLMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fla_msgs
{
template <class ContainerAllocator>
struct ControlMessage_
{
  typedef ControlMessage_<ContainerAllocator> Type;

  ControlMessage_()
    : stamp()
    , len(0)
    , data()  {
      data.assign(0);
  }
  ControlMessage_(const ContainerAllocator& _alloc)
    : stamp()
    , len(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _len_type;
  _len_type len;

   typedef boost::array<uint8_t, 32>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::fla_msgs::ControlMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::ControlMessage_<ContainerAllocator> const> ConstPtr;

}; // struct ControlMessage_

typedef ::fla_msgs::ControlMessage_<std::allocator<void> > ControlMessage;

typedef boost::shared_ptr< ::fla_msgs::ControlMessage > ControlMessagePtr;
typedef boost::shared_ptr< ::fla_msgs::ControlMessage const> ControlMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::ControlMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::ControlMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::ControlMessage_<ContainerAllocator1> & lhs, const ::fla_msgs::ControlMessage_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.len == rhs.len &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::ControlMessage_<ContainerAllocator1> & lhs, const ::fla_msgs::ControlMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ControlMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ControlMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ControlMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ControlMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ControlMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ControlMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::ControlMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61a82e2f5b8cbb1d6b3046fb9bb5d79f";
  }

  static const char* value(const ::fla_msgs::ControlMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61a82e2f5b8cbb1dULL;
  static const uint64_t static_value2 = 0x6b3046fb9bb5d79fULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::ControlMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/ControlMessage";
  }

  static const char* value(const ::fla_msgs::ControlMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::ControlMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"uint32 len\n"
"uint8[32] data\n"
;
  }

  static const char* value(const ::fla_msgs::ControlMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::ControlMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.len);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::ControlMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::ControlMessage_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "len: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.len);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_CONTROLMESSAGE_H
