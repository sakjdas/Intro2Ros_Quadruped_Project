// Generated by gencpp from file fla_msgs/ImageDetections.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_IMAGEDETECTIONS_H
#define FLA_MSGS_MESSAGE_IMAGEDETECTIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fla_msgs/Detection.h>

namespace fla_msgs
{
template <class ContainerAllocator>
struct ImageDetections_
{
  typedef ImageDetections_<ContainerAllocator> Type;

  ImageDetections_()
    : header()
    , frame_id(0)
    , detections()  {
    }
  ImageDetections_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id(0)
    , detections(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::fla_msgs::Detection_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::fla_msgs::Detection_<ContainerAllocator> >> _detections_type;
  _detections_type detections;





  typedef boost::shared_ptr< ::fla_msgs::ImageDetections_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::ImageDetections_<ContainerAllocator> const> ConstPtr;

}; // struct ImageDetections_

typedef ::fla_msgs::ImageDetections_<std::allocator<void> > ImageDetections;

typedef boost::shared_ptr< ::fla_msgs::ImageDetections > ImageDetectionsPtr;
typedef boost::shared_ptr< ::fla_msgs::ImageDetections const> ImageDetectionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::ImageDetections_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::ImageDetections_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::ImageDetections_<ContainerAllocator1> & lhs, const ::fla_msgs::ImageDetections_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_id == rhs.frame_id &&
    lhs.detections == rhs.detections;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::ImageDetections_<ContainerAllocator1> & lhs, const ::fla_msgs::ImageDetections_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ImageDetections_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ImageDetections_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ImageDetections_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ImageDetections_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ImageDetections_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ImageDetections_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::ImageDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9dc663519be6d86b6410b6f504a4648c";
  }

  static const char* value(const ::fla_msgs::ImageDetections_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9dc663519be6d86bULL;
  static const uint64_t static_value2 = 0x6410b6f504a4648cULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::ImageDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/ImageDetections";
  }

  static const char* value(const ::fla_msgs::ImageDetections_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::ImageDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint64 frame_id  # Image frame id\n"
"Detection[] detections\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fla_msgs/Detection\n"
"uint32 class_id\n"
"string class_name\n"
"float32 confidence\n"
"\n"
"# (x_min, y_min), (x_max, y_max) define the bounding box of the detection in pixel coordinates\n"
"float32 x_min \n"
"float32 y_min\n"
"float32 x_max\n"
"float32 y_max\n"
"\n"
"# ground truth unique identifier and position of the detected object (Simulation only) \n"
"uint32 object_id\n"
"float32 x_pos\n"
"float32 y_pos\n"
"float32 z_pos\n"
"\n"
"# ground truth kpts projection\n"
"Keypoint[] kpts\n"
"================================================================================\n"
"MSG: fla_msgs/Keypoint\n"
"# (x, y) define the keypoint location in pixel coordinates\n"
"uint32 id\n"
"float32 x \n"
"float32 y\n"
;
  }

  static const char* value(const ::fla_msgs::ImageDetections_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::ImageDetections_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id);
      stream.next(m.detections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageDetections_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::ImageDetections_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::ImageDetections_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "detections[]" << std::endl;
    for (size_t i = 0; i < v.detections.size(); ++i)
    {
      s << indent << "  detections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fla_msgs::Detection_<ContainerAllocator> >::stream(s, indent + "    ", v.detections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_IMAGEDETECTIONS_H
