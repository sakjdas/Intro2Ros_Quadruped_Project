// Generated by gencpp from file fla_msgs/FlightCommand.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_FLIGHTCOMMAND_H
#define FLA_MSGS_MESSAGE_FLIGHTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fla_msgs
{
template <class ContainerAllocator>
struct FlightCommand_
{
  typedef FlightCommand_<ContainerAllocator> Type;

  FlightCommand_()
    : command(0)  {
    }
  FlightCommand_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CMD_TAKEOFF)
  #undef CMD_TAKEOFF
#endif
#if defined(_WIN32) && defined(CMD_GO)
  #undef CMD_GO
#endif
#if defined(_WIN32) && defined(CMD_LAND)
  #undef CMD_LAND
#endif
#if defined(_WIN32) && defined(CMD_HOVER)
  #undef CMD_HOVER
#endif
#if defined(_WIN32) && defined(CMD_INIT)
  #undef CMD_INIT
#endif
#if defined(_WIN32) && defined(CMD_KILL)
  #undef CMD_KILL
#endif
#if defined(_WIN32) && defined(CMD_START_SEARCH)
  #undef CMD_START_SEARCH
#endif

  enum {
    CMD_TAKEOFF = 0u,
    CMD_GO = 1u,
    CMD_LAND = 2u,
    CMD_HOVER = 3u,
    CMD_INIT = 4u,
    CMD_KILL = 5u,
    CMD_START_SEARCH = 6u,
  };


  typedef boost::shared_ptr< ::fla_msgs::FlightCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::FlightCommand_<ContainerAllocator> const> ConstPtr;

}; // struct FlightCommand_

typedef ::fla_msgs::FlightCommand_<std::allocator<void> > FlightCommand;

typedef boost::shared_ptr< ::fla_msgs::FlightCommand > FlightCommandPtr;
typedef boost::shared_ptr< ::fla_msgs::FlightCommand const> FlightCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::FlightCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::FlightCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::FlightCommand_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightCommand_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::FlightCommand_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::FlightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fa8261f600a67acfe8d66a49672fd7b";
  }

  static const char* value(const ::fla_msgs::FlightCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fa8261f600a67acULL;
  static const uint64_t static_value2 = 0xfe8d66a49672fd7bULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::FlightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/FlightCommand";
  }

  static const char* value(const ::fla_msgs::FlightCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::FlightCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CMD_TAKEOFF=0\n"
"uint8 CMD_GO=1\n"
"uint8 CMD_LAND=2\n"
"uint8 CMD_HOVER=3\n"
"uint8 CMD_INIT=4\n"
"uint8 CMD_KILL=5\n"
"uint8 CMD_START_SEARCH=6\n"
"uint8 command\n"
;
  }

  static const char* value(const ::fla_msgs::FlightCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::FlightCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::FlightCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::FlightCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_FLIGHTCOMMAND_H
