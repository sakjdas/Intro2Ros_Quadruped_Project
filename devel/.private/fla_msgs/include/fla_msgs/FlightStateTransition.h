// Generated by gencpp from file fla_msgs/FlightStateTransition.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_FLIGHTSTATETRANSITION_H
#define FLA_MSGS_MESSAGE_FLIGHTSTATETRANSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace fla_msgs
{
template <class ContainerAllocator>
struct FlightStateTransition_
{
  typedef FlightStateTransition_<ContainerAllocator> Type;

  FlightStateTransition_()
    : header()
    , from_state()
    , to_state()
    , from_state_id(0)
    , to_state_id(0)  {
    }
  FlightStateTransition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , from_state(_alloc)
    , to_state(_alloc)
    , from_state_id(0)
    , to_state_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::String_<ContainerAllocator>  _from_state_type;
  _from_state_type from_state;

   typedef  ::std_msgs::String_<ContainerAllocator>  _to_state_type;
  _to_state_type to_state;

   typedef uint8_t _from_state_id_type;
  _from_state_id_type from_state_id;

   typedef uint8_t _to_state_id_type;
  _to_state_id_type to_state_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(INITIALIZING)
  #undef INITIALIZING
#endif
#if defined(_WIN32) && defined(TAKING_OFF)
  #undef TAKING_OFF
#endif
#if defined(_WIN32) && defined(FOLLOWING_PATH)
  #undef FOLLOWING_PATH
#endif
#if defined(_WIN32) && defined(HOVERING)
  #undef HOVERING
#endif
#if defined(_WIN32) && defined(LANDING)
  #undef LANDING
#endif
#if defined(_WIN32) && defined(RETURN_TO_LAUNCH)
  #undef RETURN_TO_LAUNCH
#endif
#if defined(_WIN32) && defined(LANDED)
  #undef LANDED
#endif
#if defined(_WIN32) && defined(TARGET_SEARCH)
  #undef TARGET_SEARCH
#endif
#if defined(_WIN32) && defined(TARGET_APPROACH)
  #undef TARGET_APPROACH
#endif
#if defined(_WIN32) && defined(LANDING_SEARCH)
  #undef LANDING_SEARCH
#endif
#if defined(_WIN32) && defined(LANDING_APPROACH)
  #undef LANDING_APPROACH
#endif

  enum {
    IDLE = 0u,
    INITIALIZING = 1u,
    TAKING_OFF = 2u,
    FOLLOWING_PATH = 3u,
    HOVERING = 4u,
    LANDING = 5u,
    RETURN_TO_LAUNCH = 6u,
    LANDED = 7u,
    TARGET_SEARCH = 8u,
    TARGET_APPROACH = 9u,
    LANDING_SEARCH = 10u,
    LANDING_APPROACH = 11u,
  };


  typedef boost::shared_ptr< ::fla_msgs::FlightStateTransition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::FlightStateTransition_<ContainerAllocator> const> ConstPtr;

}; // struct FlightStateTransition_

typedef ::fla_msgs::FlightStateTransition_<std::allocator<void> > FlightStateTransition;

typedef boost::shared_ptr< ::fla_msgs::FlightStateTransition > FlightStateTransitionPtr;
typedef boost::shared_ptr< ::fla_msgs::FlightStateTransition const> FlightStateTransitionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::FlightStateTransition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::FlightStateTransition_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightStateTransition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.from_state == rhs.from_state &&
    lhs.to_state == rhs.to_state &&
    lhs.from_state_id == rhs.from_state_id &&
    lhs.to_state_id == rhs.to_state_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::FlightStateTransition_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightStateTransition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightStateTransition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightStateTransition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightStateTransition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "994f9c657664b2f00c832165b7503f8a";
  }

  static const char* value(const ::fla_msgs::FlightStateTransition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x994f9c657664b2f0ULL;
  static const uint64_t static_value2 = 0x0c832165b7503f8aULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/FlightStateTransition";
  }

  static const char* value(const ::fla_msgs::FlightStateTransition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 IDLE=0\n"
"uint8 INITIALIZING=1\n"
"uint8 TAKING_OFF=2\n"
"uint8 FOLLOWING_PATH=3\n"
"uint8 HOVERING=4\n"
"uint8 LANDING=5\n"
"uint8 RETURN_TO_LAUNCH=6\n"
"uint8 LANDED=7\n"
"uint8 TARGET_SEARCH=8\n"
"uint8 TARGET_APPROACH=9\n"
"uint8 LANDING_SEARCH=10\n"
"uint8 LANDING_APPROACH=11\n"
"\n"
"std_msgs/Header header\n"
"std_msgs/String from_state\n"
"std_msgs/String to_state\n"
"uint8 from_state_id\n"
"uint8 to_state_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::fla_msgs::FlightStateTransition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.from_state);
      stream.next(m.to_state);
      stream.next(m.from_state_id);
      stream.next(m.to_state_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightStateTransition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::FlightStateTransition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::FlightStateTransition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "from_state: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.from_state);
    s << indent << "to_state: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.to_state);
    s << indent << "from_state_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.from_state_id);
    s << indent << "to_state_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.to_state_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_FLIGHTSTATETRANSITION_H
