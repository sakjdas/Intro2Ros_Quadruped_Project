// Generated by gencpp from file fla_msgs/ImageSegmentation.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_IMAGESEGMENTATION_H
#define FLA_MSGS_MESSAGE_IMAGESEGMENTATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fla_msgs
{
template <class ContainerAllocator>
struct ImageSegmentation_
{
  typedef ImageSegmentation_<ContainerAllocator> Type;

  ImageSegmentation_()
    : header()
    , classes()
    , height(0)
    , width(0)
    , data()  {
    }
  ImageSegmentation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , classes(_alloc)
    , height(0)
    , width(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _classes_type;
  _classes_type classes;

   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::fla_msgs::ImageSegmentation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::ImageSegmentation_<ContainerAllocator> const> ConstPtr;

}; // struct ImageSegmentation_

typedef ::fla_msgs::ImageSegmentation_<std::allocator<void> > ImageSegmentation;

typedef boost::shared_ptr< ::fla_msgs::ImageSegmentation > ImageSegmentationPtr;
typedef boost::shared_ptr< ::fla_msgs::ImageSegmentation const> ImageSegmentationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::ImageSegmentation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::ImageSegmentation_<ContainerAllocator1> & lhs, const ::fla_msgs::ImageSegmentation_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.classes == rhs.classes &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::ImageSegmentation_<ContainerAllocator1> & lhs, const ::fla_msgs::ImageSegmentation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::ImageSegmentation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::ImageSegmentation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::ImageSegmentation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "878d061c51a3e50d80933aa4a4a33474";
  }

  static const char* value(const ::fla_msgs::ImageSegmentation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x878d061c51a3e50dULL;
  static const uint64_t static_value2 = 0x80933aa4a4a33474ULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/ImageSegmentation";
  }

  static const char* value(const ::fla_msgs::ImageSegmentation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] classes\n"
"uint32 height\n"
"uint32 width\n"
"uint8[] data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fla_msgs::ImageSegmentation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.classes);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageSegmentation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::ImageSegmentation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::ImageSegmentation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "classes[]" << std::endl;
    for (size_t i = 0; i < v.classes.size(); ++i)
    {
      s << indent << "  classes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.classes[i]);
    }
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_IMAGESEGMENTATION_H
