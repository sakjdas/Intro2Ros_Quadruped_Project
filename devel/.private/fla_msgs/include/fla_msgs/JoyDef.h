// Generated by gencpp from file fla_msgs/JoyDef.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_JOYDEF_H
#define FLA_MSGS_MESSAGE_JOYDEF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fla_msgs
{
template <class ContainerAllocator>
struct JoyDef_
{
  typedef JoyDef_<ContainerAllocator> Type;

  JoyDef_()
    {
    }
  JoyDef_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(A)
  #undef A
#endif
#if defined(_WIN32) && defined(B)
  #undef B
#endif
#if defined(_WIN32) && defined(X)
  #undef X
#endif
#if defined(_WIN32) && defined(Y)
  #undef Y
#endif
#if defined(_WIN32) && defined(LB)
  #undef LB
#endif
#if defined(_WIN32) && defined(RB)
  #undef RB
#endif
#if defined(_WIN32) && defined(BACK)
  #undef BACK
#endif
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(CENTER)
  #undef CENTER
#endif
#if defined(_WIN32) && defined(LS)
  #undef LS
#endif
#if defined(_WIN32) && defined(RS)
  #undef RS
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif
#if defined(_WIN32) && defined(LEFT_X)
  #undef LEFT_X
#endif
#if defined(_WIN32) && defined(LEFT_Y)
  #undef LEFT_Y
#endif
#if defined(_WIN32) && defined(LT)
  #undef LT
#endif
#if defined(_WIN32) && defined(RIGHT_X)
  #undef RIGHT_X
#endif
#if defined(_WIN32) && defined(RIGHT_Y)
  #undef RIGHT_Y
#endif
#if defined(_WIN32) && defined(RT)
  #undef RT
#endif

  enum {
    A = 0,
    B = 1,
    X = 2,
    Y = 3,
    LB = 4,
    RB = 5,
    BACK = 6,
    START = 7,
    CENTER = 8,
    LS = 9,
    RS = 10,
    LEFT = 11,
    RIGHT = 12,
    UP = 13,
    DOWN = 14,
    LEFT_X = 0,
    LEFT_Y = 1,
    LT = 2,
    RIGHT_X = 3,
    RIGHT_Y = 4,
    RT = 5,
  };


  typedef boost::shared_ptr< ::fla_msgs::JoyDef_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::JoyDef_<ContainerAllocator> const> ConstPtr;

}; // struct JoyDef_

typedef ::fla_msgs::JoyDef_<std::allocator<void> > JoyDef;

typedef boost::shared_ptr< ::fla_msgs::JoyDef > JoyDefPtr;
typedef boost::shared_ptr< ::fla_msgs::JoyDef const> JoyDefConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::JoyDef_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::JoyDef_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::JoyDef_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::JoyDef_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::JoyDef_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::JoyDef_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::JoyDef_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::JoyDef_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::JoyDef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5483257fd0a1adbc2dd471d331e6470";
  }

  static const char* value(const ::fla_msgs::JoyDef_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5483257fd0a1adbULL;
  static const uint64_t static_value2 = 0xc2dd471d331e6470ULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::JoyDef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/JoyDef";
  }

  static const char* value(const ::fla_msgs::JoyDef_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::JoyDef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message defining constants for the wireless joysticks used by ACL\n"
"\n"
"# buttons\n"
"int64 A=0\n"
"int64 B=1\n"
"int64 X=2\n"
"int64 Y=3\n"
"int64 LB=4\n"
"int64 RB=5\n"
"int64 BACK=6\n"
"int64 START=7\n"
"int64 CENTER=8 # center 'on' button\n"
"int64 LS=9 # left joystick\n"
"int64 RS=10 # right joystick\n"
"int64 LEFT=11\n"
"int64 RIGHT=12\n"
"int64 UP=13\n"
"int64 DOWN=14\n"
"\n"
"# axes\n"
"int64 LEFT_X=0\n"
"int64 LEFT_Y=1\n"
"int64 LT=2\n"
"int64 RIGHT_X=3\n"
"int64 RIGHT_Y=4\n"
"int64 RT=5\n"
;
  }

  static const char* value(const ::fla_msgs::JoyDef_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::JoyDef_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoyDef_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::JoyDef_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::fla_msgs::JoyDef_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_JOYDEF_H
