// Generated by gencpp from file fla_msgs/FlightEvent.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_FLIGHTEVENT_H
#define FLA_MSGS_MESSAGE_FLIGHTEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fla_msgs
{
template <class ContainerAllocator>
struct FlightEvent_
{
  typedef FlightEvent_<ContainerAllocator> Type;

  FlightEvent_()
    : header()
    , event_id(0)  {
    }
  FlightEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , event_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _event_id_type;
  _event_id_type event_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BEGIN)
  #undef BEGIN
#endif
#if defined(_WIN32) && defined(INITIALIZED)
  #undef INITIALIZED
#endif
#if defined(_WIN32) && defined(ALTITUDE_STABLE)
  #undef ALTITUDE_STABLE
#endif
#if defined(_WIN32) && defined(GOAL_REACHED)
  #undef GOAL_REACHED
#endif
#if defined(_WIN32) && defined(LAND_COMMANDED)
  #undef LAND_COMMANDED
#endif
#if defined(_WIN32) && defined(HOVER_COMMANDED)
  #undef HOVER_COMMANDED
#endif
#if defined(_WIN32) && defined(RESET_COMMANDED)
  #undef RESET_COMMANDED
#endif
#if defined(_WIN32) && defined(LANDED)
  #undef LANDED
#endif
#if defined(_WIN32) && defined(RC_COMM_LOSS)
  #undef RC_COMM_LOSS
#endif
#if defined(_WIN32) && defined(TARGET_DETECTED_OUT_OF_RANGE)
  #undef TARGET_DETECTED_OUT_OF_RANGE
#endif
#if defined(_WIN32) && defined(TARGET_DETECTED_IN_RANGE)
  #undef TARGET_DETECTED_IN_RANGE
#endif
#if defined(_WIN32) && defined(SEARCH_COMPLETE)
  #undef SEARCH_COMPLETE
#endif
#if defined(_WIN32) && defined(RTL_COMMANDED)
  #undef RTL_COMMANDED
#endif
#if defined(_WIN32) && defined(FLIGHTEVENT_MAX)
  #undef FLIGHTEVENT_MAX
#endif

  enum {
    BEGIN = 0u,
    INITIALIZED = 1u,
    ALTITUDE_STABLE = 2u,
    GOAL_REACHED = 3u,
    LAND_COMMANDED = 4u,
    HOVER_COMMANDED = 5u,
    RESET_COMMANDED = 6u,
    LANDED = 7u,
    RC_COMM_LOSS = 8u,
    TARGET_DETECTED_OUT_OF_RANGE = 9u,
    TARGET_DETECTED_IN_RANGE = 10u,
    SEARCH_COMPLETE = 11u,
    RTL_COMMANDED = 12u,
    FLIGHTEVENT_MAX = 13u,
  };


  typedef boost::shared_ptr< ::fla_msgs::FlightEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::FlightEvent_<ContainerAllocator> const> ConstPtr;

}; // struct FlightEvent_

typedef ::fla_msgs::FlightEvent_<std::allocator<void> > FlightEvent;

typedef boost::shared_ptr< ::fla_msgs::FlightEvent > FlightEventPtr;
typedef boost::shared_ptr< ::fla_msgs::FlightEvent const> FlightEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::FlightEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::FlightEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::FlightEvent_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.event_id == rhs.event_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::FlightEvent_<ContainerAllocator1> & lhs, const ::fla_msgs::FlightEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::FlightEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::FlightEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::FlightEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::FlightEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4110787c7e1d3f4e3706ce25b95d01e2";
  }

  static const char* value(const ::fla_msgs::FlightEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4110787c7e1d3f4eULL;
  static const uint64_t static_value2 = 0x3706ce25b95d01e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::FlightEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/FlightEvent";
  }

  static const char* value(const ::fla_msgs::FlightEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::FlightEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 BEGIN=0\n"
"uint8 INITIALIZED=1\n"
"uint8 ALTITUDE_STABLE=2\n"
"uint8 GOAL_REACHED=3\n"
"uint8 LAND_COMMANDED=4\n"
"uint8 HOVER_COMMANDED=5\n"
"uint8 RESET_COMMANDED=6\n"
"uint8 LANDED=7\n"
"uint8 RC_COMM_LOSS=8\n"
"uint8 TARGET_DETECTED_OUT_OF_RANGE=9\n"
"uint8 TARGET_DETECTED_IN_RANGE=10\n"
"uint8 SEARCH_COMPLETE=11\n"
"uint8 RTL_COMMANDED=12\n"
"uint8 FLIGHTEVENT_MAX=13\n"
"std_msgs/Header header\n"
"uint8 event_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fla_msgs::FlightEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::FlightEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.event_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlightEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::FlightEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::FlightEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "event_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_FLIGHTEVENT_H
