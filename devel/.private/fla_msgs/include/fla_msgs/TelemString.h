// Generated by gencpp from file fla_msgs/TelemString.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_TELEMSTRING_H
#define FLA_MSGS_MESSAGE_TELEMSTRING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fla_msgs
{
template <class ContainerAllocator>
struct TelemString_
{
  typedef TelemString_<ContainerAllocator> Type;

  TelemString_()
    : nodeid(0)
    , text()  {
    }
  TelemString_(const ContainerAllocator& _alloc)
    : nodeid(0)
    , text(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _nodeid_type;
  _nodeid_type nodeid;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;





  typedef boost::shared_ptr< ::fla_msgs::TelemString_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::TelemString_<ContainerAllocator> const> ConstPtr;

}; // struct TelemString_

typedef ::fla_msgs::TelemString_<std::allocator<void> > TelemString;

typedef boost::shared_ptr< ::fla_msgs::TelemString > TelemStringPtr;
typedef boost::shared_ptr< ::fla_msgs::TelemString const> TelemStringConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::TelemString_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::TelemString_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::TelemString_<ContainerAllocator1> & lhs, const ::fla_msgs::TelemString_<ContainerAllocator2> & rhs)
{
  return lhs.nodeid == rhs.nodeid &&
    lhs.text == rhs.text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::TelemString_<ContainerAllocator1> & lhs, const ::fla_msgs::TelemString_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::TelemString_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::TelemString_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::TelemString_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::TelemString_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::TelemString_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::TelemString_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::TelemString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90c5a36c3a388c55ce89c05cc31213e3";
  }

  static const char* value(const ::fla_msgs::TelemString_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90c5a36c3a388c55ULL;
  static const uint64_t static_value2 = 0xce89c05cc31213e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::TelemString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/TelemString";
  }

  static const char* value(const ::fla_msgs::TelemString_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::TelemString_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 nodeid\n"
"string text\n"
;
  }

  static const char* value(const ::fla_msgs::TelemString_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::TelemString_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeid);
      stream.next(m.text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TelemString_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::TelemString_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::TelemString_<ContainerAllocator>& v)
  {
    s << indent << "nodeid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nodeid);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_TELEMSTRING_H
