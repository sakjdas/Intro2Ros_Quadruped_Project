// Generated by gencpp from file fla_msgs/NodeList.msg
// DO NOT EDIT!


#ifndef FLA_MSGS_MESSAGE_NODELIST_H
#define FLA_MSGS_MESSAGE_NODELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fla_msgs/NodeStatus.h>

namespace fla_msgs
{
template <class ContainerAllocator>
struct NodeList_
{
  typedef NodeList_<ContainerAllocator> Type;

  NodeList_()
    : stamp()
    , nodelog()  {
    }
  NodeList_(const ContainerAllocator& _alloc)
    : stamp()
    , nodelog(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::fla_msgs::NodeStatus_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::fla_msgs::NodeStatus_<ContainerAllocator> >> _nodelog_type;
  _nodelog_type nodelog;





  typedef boost::shared_ptr< ::fla_msgs::NodeList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fla_msgs::NodeList_<ContainerAllocator> const> ConstPtr;

}; // struct NodeList_

typedef ::fla_msgs::NodeList_<std::allocator<void> > NodeList;

typedef boost::shared_ptr< ::fla_msgs::NodeList > NodeListPtr;
typedef boost::shared_ptr< ::fla_msgs::NodeList const> NodeListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fla_msgs::NodeList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fla_msgs::NodeList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fla_msgs::NodeList_<ContainerAllocator1> & lhs, const ::fla_msgs::NodeList_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.nodelog == rhs.nodelog;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fla_msgs::NodeList_<ContainerAllocator1> & lhs, const ::fla_msgs::NodeList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fla_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::NodeList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fla_msgs::NodeList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::NodeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fla_msgs::NodeList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::NodeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fla_msgs::NodeList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fla_msgs::NodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef5328a9c9c28a94588f0215d3bce4ca";
  }

  static const char* value(const ::fla_msgs::NodeList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef5328a9c9c28a94ULL;
  static const uint64_t static_value2 = 0x588f0215d3bce4caULL;
};

template<class ContainerAllocator>
struct DataType< ::fla_msgs::NodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fla_msgs/NodeList";
  }

  static const char* value(const ::fla_msgs::NodeList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fla_msgs::NodeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"NodeStatus[] nodelog\n"
"\n"
"================================================================================\n"
"MSG: fla_msgs/NodeStatus\n"
"uint8 INACTIVE=1\n"
"uint8 STARTING=2\n"
"uint8 INIT=3\n"
"uint8 READY=4\n"
"uint8 ALARM=5\n"
"uint8 FAIL=6\n"
"uint8 SILENT=7\n"
"uint32 id\n"
"uint32 pid\n"
"uint8 status\n"
"int32 arg\n"
"float64 load\n"
;
  }

  static const char* value(const ::fla_msgs::NodeList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fla_msgs::NodeList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.nodelog);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fla_msgs::NodeList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fla_msgs::NodeList_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "nodelog[]" << std::endl;
    for (size_t i = 0; i < v.nodelog.size(); ++i)
    {
      s << indent << "  nodelog[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fla_msgs::NodeStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.nodelog[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLA_MSGS_MESSAGE_NODELIST_H
